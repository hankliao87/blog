<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Hank Liao's Blog</title><link href="https://hankliao87.github.io/blog/" rel="alternate"></link><link href="https://hankliao87.github.io/blog/feeds/all.atom.xml" rel="self"></link><id>https://hankliao87.github.io/blog/</id><updated>2021-07-14T20:00:00+08:00</updated><entry><title>Fix Dark Text on Dark Background of QT Apps in Gnome with Dark Theme</title><link href="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/" rel="alternate"></link><published>2021-07-14T20:00:00+08:00</published><updated>2021-07-14T20:00:00+08:00</updated><author><name>hankliao87</name></author><id>tag:hankliao87.github.io,2021-07-14:/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/</id><summary type="html">&lt;p class="first last"&gt;Tutorial of fixing dark text on dark background of qt apps in gnome when using dark theme&lt;/p&gt;
</summary><content type="html">&lt;div class="section" id="problem"&gt;
&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;When we change the theme of the QT apps to the dark varient, the text of the interference might be difficult to see on the dark background.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
&lt;a href="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-1.png"&gt;
&lt;img src="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-1.png" class="figure-img img-fluid rounded" alt="Dark text on dark background (Goldendict)"&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center"&gt;Dark text on dark background (Goldendict)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/div&gt;
&lt;div class="section" id="solution"&gt;
&lt;h2&gt;Solution&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Tools: &lt;code&gt;$ yay -S kvantum-qt5 qt5ct qt5-styleplugins&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Add the content below in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.profile&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;QT_QPA_PLATFORMTHEME&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;gtk2&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;QT_STYLE_OVERRIDE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;kvantum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Select preferred dark theme in kvantum.&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
&lt;a href="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-4.png"&gt;
&lt;img src="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-4.png" class="figure-img img-fluid rounded" alt="Select preferred dark theme"&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center"&gt;Select preferred dark theme&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Change &lt;tt class="docutils literal"&gt;kvantum&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;kvantum-dark&lt;/span&gt;&lt;/tt&gt; in the QT5 Setting as below:&lt;/p&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
&lt;a href="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-3.png"&gt;
&lt;img src="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-3.png" class="figure-img img-fluid rounded" alt="Change kvantum to kvantum-dark"&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center"&gt;Change kvantum to kvantum-dark&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="admonition note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Sometimes you will need to logout and login again to apply the new settings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="result"&gt;
&lt;h2&gt;Result&lt;/h2&gt;
&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
&lt;a href="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-2.png"&gt;
&lt;img src="https://hankliao87.github.io/blog/posts/2021/07/fix-dark-text-on-dark-background-of-qt-apps-in-gnome-with-dark-theme/fix-dark-text-in-dark-theme-using-qt-in-gnome-2.png" class="figure-img img-fluid rounded" alt="Interface after fix (Goldendict)"&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center"&gt;Interface after fix (Goldendict)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;/div&gt;
</content><category term="Tutorial"></category><category term="Tutorial"></category></entry><entry><title>Deploy Model on Android Device using TVM</title><link href="https://hankliao87.github.io/blog/posts/2020/02/deploy-model-on-android-device-using-tvm/" rel="alternate"></link><published>2020-02-22T21:00:00+08:00</published><updated>2020-02-22T21:00:00+08:00</updated><author><name>hankliao87</name></author><id>tag:hankliao87.github.io,2020-02-22:/blog/posts/2020/02/deploy-model-on-android-device-using-tvm/</id><summary type="html">&lt;p class="first last"&gt;Tutorial of deploying model on android device using TVM&lt;/p&gt;
</summary><content type="html">&lt;div class="text-center"&gt;
&lt;figure class="figure"&gt;
&lt;a href="https://hankliao87.github.io/blog/posts/2020/02/deploy-model-on-android-device-using-tvm/deploy-model-on-android-device-using-tvm-result.png"&gt;
&lt;img src="https://hankliao87.github.io/blog/posts/2020/02/deploy-model-on-android-device-using-tvm/deploy-model-on-android-device-using-tvm-result.png" class="figure-img img-fluid rounded" alt="The schematic diagram of the result"&gt;
&lt;/a&gt;
&lt;figcaption class="figure-caption text-center"&gt;The schematic diagram of the result. The cat image is downloaded from &lt;a href="https://raw.githubusercontent.com/dmlc/mxnet.js/master/data/cat.png?raw=true"&gt;here&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/div&gt;&lt;div class="section" id="build-tvm-docker-container-environment"&gt;
&lt;h2&gt;Build TVM Docker Container Environment&lt;/h2&gt;
&lt;p&gt;Build the TVM Docker container to ensure we has the same environment.&lt;/p&gt;
&lt;p&gt;(You can skip this section if you know how to install the
&lt;a class="reference external" href="https://github.com/apache/incubator-tvm/blob/master/docker/Dockerfile.demo_android"&gt;dependent package&lt;/a&gt;
and tvm4j. And you are familiar with the hierarchy of the folder of the tvm.)&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Install Docker. &lt;a class="reference external" href="https://docs.docker.com/install/"&gt;https://docs.docker.com/install/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Clone the TVM repo.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ git clone --depth 1 https://github.com/apache/incubator-tvm.git tvm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Build the Docker image using the Dockerfile &lt;tt class="docutils literal"&gt;Dockerfile.demo_android&lt;/tt&gt; in
the folder &lt;tt class="docutils literal"&gt;tvm/docker&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd tvm/docker/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ bash ./build.sh demo_android -it bash&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Exit from the temp container using &lt;tt class="docutils literal"&gt;ctrl+D&lt;/tt&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Build the TVM Docker container and attach it.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ docker run -it --name tvm tvm.demo_android&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ docker start tvm &amp;amp;&amp;amp; docker attach tvm&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install tvm4j.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ apt install maven&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd /usr/tvm/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ make jvmdkg&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ make jvminstall&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="test-the-model-running-well-on-tvm"&gt;
&lt;h2&gt;Test the Model Running Well on TVM&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy the onnx into the Docker container using
&lt;a class="reference external" href="https://docs.docker.com/engine/reference/commandline/cp/"&gt;docker cp&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install onnx.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ pip3 install onnx&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Run the script below to test the model.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;onnx&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tvm&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tvm.relay&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;relay&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tvm.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;graph_runtime&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the input of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the filename of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;onnx_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onnx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;model.onnx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the shape of input of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the input name of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;input_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;input.1&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;llvm&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;shape_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_onnx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onnx_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;ctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tvm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;context&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;intrp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;graph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;dtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;float32&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;graph_runtime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ctx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;input_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tvm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;input&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dtype&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_output&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asnumpy&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# May change this to match the output type of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="cross-compile-the-model"&gt;
&lt;h2&gt;Cross-compile the Model&lt;/h2&gt;
&lt;p&gt;Run the script below and you will get three files
(&lt;tt class="docutils literal"&gt;model.so&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;model.json&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;model.params&lt;/tt&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;onnx&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tvm&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;tvm.relay&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;relay&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the filename of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;onnx_model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onnx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;model.onnx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the shape of input of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ones&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change this to match the input name of your model.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;input_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;input.1&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;arch&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arm64&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="s1"&gt;&amp;#39;llvm -target=&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;-linux-android&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;arch&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;shape_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;input_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;frontend&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_onnx&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;onnx_model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shape&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;shape_dict&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;intrp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_executor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;graph&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tvm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opt_level&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build_module&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sym&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;libpath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;model.so&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# Change the parameter `cc` to match the architecture of your phone.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# You can run `adb shell cat /proc/cpuinfo` to list the info of your CPU.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="c1"&gt;# This is for Android SDK 28 (Pie) and CPU is aarch64.&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;lib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;export_library&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;libpath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/opt/android-sdk-linux/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android28-clang&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;graph_json_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;model.json&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph_json_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;graph&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="n"&gt;param_path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;model.params&amp;#39;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;param_path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;   &lt;span class="n"&gt;fo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;relay&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save_param_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;params&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="write-the-android-program"&gt;
&lt;h2&gt;Write the Android Program&lt;/h2&gt;
&lt;p&gt;In the folder &lt;tt class="docutils literal"&gt;tvm/apps/android_deploy&lt;/tt&gt;, you will see an example provided by
TVM. You can compile the Android program first to know what each functions
does, or you can modified the files according to
&lt;a class="reference external" href="https://github.com/apache/incubator-tvm/blob/master/apps/android_deploy/README.md"&gt;README.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Moreover, &lt;a class="reference external" href="https://github.com/hankliao87/deploy-style-transfer-on-android"&gt;here&lt;/a&gt;
is an Android program that I deployed the style transfer models which were
trained by &lt;a class="reference external" href="https://github.com/Tony-Tseng"&gt;Tony Tseng&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compile-the-android-program"&gt;
&lt;h2&gt;Compile the Android Program&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Change directory to the root of the android program.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ cd /usr/tvm/apps/android_deploy&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Generate the apk file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ gradle clean build --no-daemon&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Create the key which is used to sign apk if you don't have.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ bash ./dev_tools/gen_keystore.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Sign the apk file.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ bash ./dev_tools/sign_apk.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;The signed apk file will be
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;./app/build/outputs/apk/release/tvmdemo-release.apk&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Copy the apk file from the Docker container.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</content><category term="Tutorial"></category><category term="Tutorial"></category></entry><entry><title>Add Opencc Support for Goldendict in Archlinux</title><link href="https://hankliao87.github.io/blog/posts/2020/01/add-opencc-support-for-goldendict-in-archlinux/" rel="alternate"></link><published>2020-01-23T18:20:00+08:00</published><updated>2020-01-23T18:20:00+08:00</updated><author><name>hankliao87</name></author><id>tag:hankliao87.github.io,2020-01-23:/blog/posts/2020/01/add-opencc-support-for-goldendict-in-archlinux/</id><summary type="html">&lt;p&gt;Tutorial of adding opencc support for goldendict in archlinux&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Problem&lt;/h2&gt;
&lt;p&gt;When you install goldendict using &lt;code&gt;yay&lt;/code&gt;, you won't see the &lt;code&gt;Chinese Conversion&lt;/code&gt; section in the transliteration option. This is because the method of building goldendict provided by the community doesn't add the dependent package of the chinese conversion. According to the &lt;a href="https://github.com/goldendict/goldendict#building-with-chinese-conversion-support"&gt;README of goldendict&lt;/a&gt;, we just need to add the dependent package &lt;code&gt;opencc&lt;/code&gt; before building it.  &lt;/p&gt;
&lt;div class="text-center"&gt;
  &lt;figure class="figure"&gt;
    &lt;a href="https://hankliao87.github.io/blog/posts/2020/01/add-opencc-support-for-goldendict-in-archlinux/add-opencc-support-for-goldendict-in-archlinux-option.png"&gt;
    &lt;img src="https://hankliao87.github.io/blog/posts/2020/01/add-opencc-support-for-goldendict-in-archlinux/add-opencc-support-for-goldendict-in-archlinux-option.png" class="figure-img img-fluid rounded" alt="The transliteration option in goldendict with opencc support"&gt;
    &lt;/a&gt;
    &lt;figcaption class="figure-caption text-center"&gt;The transliteration option in goldendict with opencc support.&lt;/figcaption&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2&gt;Solution&lt;/h2&gt;
&lt;p&gt;First, download &lt;code&gt;PKGBUILD&lt;/code&gt; and &lt;code&gt;goldendict.changelog&lt;/code&gt;: &lt;code&gt;$ yay -G goldendict&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;After that, edit the &lt;code&gt;PKGBUILD&lt;/code&gt; file in the folder &lt;code&gt;goldendict&lt;/code&gt;.  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="code-line"&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gd"&gt;- depends=(&amp;#39;hunspell&amp;#39; &amp;#39;libxtst&amp;#39; &amp;#39;libzip&amp;#39; &amp;#39;libao&amp;#39; &amp;#39;qt5-webkit&amp;#39; &amp;#39;qt5-svg&amp;#39; &amp;#39;qt5-x11extras&amp;#39; &amp;#39;qt5-tools&amp;#39; &amp;#39;phonon-qt5&amp;#39; &amp;#39;ffmpeg&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gi"&gt;+ depends=(&amp;#39;hunspell&amp;#39; &amp;#39;libxtst&amp;#39; &amp;#39;libzip&amp;#39; &amp;#39;libao&amp;#39; &amp;#39;qt5-webkit&amp;#39; &amp;#39;qt5-svg&amp;#39; &amp;#39;qt5-x11extras&amp;#39; &amp;#39;qt5-tools&amp;#39; &amp;#39;phonon-qt5&amp;#39; &amp;#39;ffmpeg&amp;#39; &amp;#39;opencc&amp;#39;)&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;build(){&lt;/span&gt;
&lt;span class="code-line"&gt;    cd &amp;quot;${srcdir}&amp;quot;/$pkgname-1.5.0-RC2&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gd"&gt;-   qmake-qt5 &amp;quot;CONFIG+=no_epwing_support&amp;quot; PREFIX=&amp;quot;/usr&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;span class="gi"&gt;+   qmake-qt5 &amp;quot;CONFIG+=no_epwing_support chinese_conversion_support&amp;quot; PREFIX=&amp;quot;/usr&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/span&gt;
&lt;span class="code-line"&gt;    make&lt;/span&gt;
&lt;span class="code-line"&gt;}&lt;/span&gt;
&lt;span class="code-line"&gt;...&lt;/span&gt;
&lt;span class="code-line"&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the end, build and install goldendict: &lt;code&gt;$ makepkg -si&lt;/code&gt;&lt;/p&gt;</content><category term="Tutorial"></category><category term="Tutorial"></category></entry></feed>